{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","components/SortingAnalyzer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingAnalyzer","useState","setnumber","arrayAreEqual","arrayOne","arrayTwo","className","map","x","idx","style","height","onClick","random","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","backgroundColor","newHeight","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e0939da6.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,      \r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React,{ useState} from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingAnalyzer.css';\r\n\r\nconst ANIMATION_SPEED_MS = 3;\r\nconst NUMBER_OF_ARRAY_BARS = 275;\r\n\r\nfunction SortingAnalyzer(){\r\n   \r\n    const[array,setnumber] = useState([]);\r\n\r\n    function handleClick(){\r\n        const array = [];\r\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++){\r\n            array.push( Math.floor(Math.random() * (400 - 5) + 5));\r\n        }\r\n         setnumber(array); \r\n     }\r\n      \r\n     function mergesort(){\r\n       const animations = getMergeSortAnimations(array);\r\n  \r\n     \r\n         for(let i=0;i<animations.length;i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n           const isColorChange = i%3 !== 2;\r\n           if(isColorChange){\r\n               const[barOneIdx,barTwoIdx] = animations[i];\r\n               const barOneStyle = arrayBars[barOneIdx].style;\r\n               const barTwoStyle = arrayBars[barTwoIdx].style;\r\n               const color =  i % 3 === 0? 'red' : 'turquoise';\r\n               setTimeout( () => {\r\n                   barOneStyle.backgroundColor = color;\r\n                   barTwoStyle.backgroundColor = color;\r\n               },i*ANIMATION_SPEED_MS); \r\n           } else {\r\n                setTimeout(() => {\r\n                    const[barOneIdx,newHeight] = animations[i];\r\n                    const barOneStyle  = arrayBars[barOneIdx].style; \r\n                    barOneStyle.height = `${newHeight}px`;\r\n                },i*ANIMATION_SPEED_MS); \r\n           }\r\n       }\r\n     }\r\n\r\n    function arrayAreEqual(arrayOne,arrayTwo){\r\n        if(arrayOne.length !== arrayTwo.length) return false;\r\n        for(let i=0;i<arrayOne.length;i++){\r\n            if(arrayOne[i] !== arrayTwo[i]) return false;\r\n        }\r\n         return true;\r\n    }\r\n\r\n     function testSortingAlgorithms(){\r\n         for(let i=0;i<100;i++){\r\n             const array = [];\r\n             const length = Math.floor(Math.random() * (1000 - 1) + 1);\r\n             for(let i=0;i<length;i++){\r\n                 array.push(Math.floor(Math.random() * (1000 - (-1000)) + (-1000)) );\r\n             }\r\n             const javaScriptSortedArray = array.slice().sort((a,b) => a-b);\r\n             const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n             console.log(arrayAreEqual(javaScriptSortedArray,mergeSortedArray));\r\n         }\r\n     }\r\n\r\n    return (\r\n      <div> \r\n        <div className=\"array-container\">\r\n           { array.map((x,idx) => {\r\n              return <div className='array-bar' key={idx} style={{height: `${x}px`}}>\r\n              </div>\r\n            })}\r\n        </div>\r\n       <button onClick={handleClick}>Generate </button>\r\n       <button onClick={mergesort}>MergeSort</button>\r\n       <button onClick={testSortingAlgorithms}>testSortingAlgorithms</button>\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default SortingAnalyzer;\r\n","import React from \"react\";\nimport SortingAnalyzer from \"./components/SortingAnalyzer.jsx\";\nfunction App() {\n  return (\n    <div >\n        <SortingAnalyzer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}